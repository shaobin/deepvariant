# Copyright 2018 Google Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from "third_party/nucleus/util/math.h":
  namespace `nucleus`:
    def `Log10PTrueToPhred` as log10_ptrue_to_phred(
        log10_ptrue: float, value_if_not_finite: float) -> float
    def `PhredToPError` as phred_to_perror(phred: int) -> float
    def `PhredToLog10PError` as phred_to_log10_perror(phred: int) -> float
    def `PErrorToLog10PError` as perror_to_log10_perror(perror: float) -> float
    def `PErrorToPhred` as perror_to_phred(perror: float) -> float
    def `Log10PErrorToPhred` as log10_perror_to_phred(log10_perror: float) -> float
    def `PErrorToRoundedPhred` as perror_to_rounded_phred(perror: float) -> int
    def `Log10PErrorToRoundedPhred` as log10_perror_to_rounded_phred(log10_perror: float) -> int
    def `Log10ToReal` as log10_perror_to_perror(log10_perror: float) -> float
    def `ZeroShiftLikelihoods` as zero_shift_log10_probs(log10_probs: list<float>) -> list<float>
