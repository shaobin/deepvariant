// Copyright 2017 Google Inc.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its
//    contributors may be used to endorse or promote products derived from this
//    software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

import "third_party/nucleus/protos/range.proto";

package learning.genomics.deepvariant;

// Encapsulates a list of candidate haplotype sequences for a genomic region.
message CandidateHaplotypes {
  // The genomic region containing the candidate haplotypes.
  nucleus.genomics.v1.Range span = 1;

  // The list of candidate haplotype sequences.  Each individual haplotype
  // is represented by its nucleotide sequence.
  repeated string haplotypes = 2;
}

message RealignerOptions {

  // Config parameters for "window selector (ws)" phase.
  message WindowSelectorOptions {
    // Minimum number of supporting reads to call a reference position for
    // local assembly.
    int32 min_num_supporting_reads = 1;

    // Maximum number of supporting reads to call a reference position for local
    // assembly.
    int32 max_num_supporting_reads = 2;

    // Minimum read alignment quality to consider in calling a reference
    // position for local assembly.
    int32 min_mapq = 3;

    // Minimum base quality to consider in calling a reference position for
    // local assembly.
    int32 min_base_quality = 4;

    // Minimum distance between candidate windows for local assembly.
    int32 min_windows_distance = 5;

    // Maximum window size to consider for local assembly. Large noisy regions
    // are skipped for realignment.
    int32 max_window_size = 6;
  }

  // Config parameters for "de-Bruijn graph (dbg)" phase.
  message DeBruijnGraphOptions {

    // Initial k-mer size to build the graph.
    int32 min_k = 1;

    // Maximum k-mer size. Larger k-mer size is used to resolve graph cycles.
    int32 max_k = 2;

    // Increment size for k to try in resolving graph cycles.
    int32 step_k = 3;

    // Minimum read alignment quality to consider in building the graph.
    int32 min_mapq = 4;

    // Minimum base quality in a k-mer sequence to consider in building the
    // graph.
    int32 min_base_quality = 5;

    // Minimum number of supporting reads to keep an edge.
    int32 min_edge_weight = 6;

    // Maximum number of paths within a graph to consider for realignment.
    // Set max_num_paths to 0 to have unlimited number of paths.
    int32 max_num_paths = 7;
  };

  // Config parameters for "alignment (aln)" phase.
  message AlignerOptions {

    // Match score (expected to be a non-negative score).
    int32 match = 1;

    // Mismatch score (expected to be a non-positive score).
    int32 mismatch = 2;

    // Gap open score (expected to be a non-positive score).
    // Score for a gap of length g is (gap_open + (g - 1) * gap_extend).
    int32 gap_open = 3;

    // Gap extend score (expected to be a non-positive score).
    // Score for a gap of length g is (gap_open + (g - 1) * gap_extend).
    int32 gap_extend = 4;

    // k-mer size used to index target sequence.
    int32 k = 5;

    // Estimated sequencing error rate.
    float error_rate = 6;
  }

  // Config parameters for "alignment (aln)" phase.
  message Diagnostics {

    // Enable runtime diagnostic outputs.
    bool enabled = 1;

    // The root where we'll put our diagnostic outputs.
    string output_root = 2;

    // True if we should also emit the realigned reads themselves.
    bool emit_realigned_reads = 3;
  }

  // Config parameters for "window selector (ws)" phase.
  WindowSelectorOptions ws_config = 1;

  // Config parameters for "de-Bruijn graph (dbg)" phase.
  DeBruijnGraphOptions dbg_config = 2;

  // Config parameters for "alignment (aln)" phase.
  AlignerOptions aln_config = 3;

  // Diagnostics options.
  Diagnostics diagnostics = 4;
}
